python manage.py shell

Импортируем модель news:
	>>> from news.models import *

Создаем пользователей:
	>>> u1 = User.objects.create_user(username='Yerzhan')
	>>> u1
	<User: Yerzhan>
	>>> u2 = User.objects.create_user(username='Sergey')
	>>> u2
	<User: Sergey>
	>>> u3 = User.objects.create_user(username='Igor')
	>>> u3
	<User: Igor>
	>>> u4 = User.objects.create_user(username='Arman')

Создаем авторов:
	>>> Author.objects.create(authorUser=u1)
	<Author: Author object (1)>
	>>> Author.objects.create(authorUser=u2)
	<Author: Author object (2)>

Создаем категории:
	>>> Category.objects.create(name='IT')
	<Category: Category object (1)>
	>>> Category.objects.create(name='Sport')
	<Category: Category object (2)>
	>>> Category.objects.create(name='Vehicles')
	<Category: Category object (3)>
	>>> Category.objects.create(name='Games')
	<Category: Category object (4)>

Получаем автора по id:
	>>> author = Author.objects.get(id=1)
	>>> author
	<Author: Author object (1)>
	>>> author2 = Author.objects.get(id=2)
	>>> author2
	<Author: Author object (2)>

Создаем пост:
	>>> Post.objects.create(author=author, categoryType='NW', title='sometitle', text='sometext')
	<Post: Post object (1)>
	>>> Post.objects.get(id=1).title
	'sometitle'
	>>> Post.objects.create(author=author, categoryType='AR', title='Healthing', text='Make sport is very healthy')
	<Post: Post object (2)>
	>>> Post.objects.create(author=author2, categoryType='AR', title='Python', text='Hello world!')
	<Post: Post object (3)>

К статьям/новостям присваиваем категории:
	>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=1))
	>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=2))
	>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=1))
	>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=3))
	>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=4))
	>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=3))

Создаем комментарии к статьям/новостям:
	>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='greate post')
	<Comment: Comment object (1)>
	>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='interesting news')
	<Comment: Comment object (2)>
	>>> Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text='LoL')
	<Comment: Comment object (3)>
	>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=1).authorUser, text='Python is the best prog')
	<Comment: Comment object (4)>
	>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='Hello Skillfactory')
	<Comment: Comment object (5)>

Применям функции like() и dislike() к комментариям:
	>>> Comment.objects.get(id=1).like()
	>>> Comment.objects.get(id=1).rating
	1
	>>> Comment.objects.get(id=1).dislike()
	>>> Comment.objects.get(id=1).dislike()
	>>> Comment.objects.get(id=1).dislike()
	>>> Comment.objects.get(id=1).rating
	-2
	>>> Comment.objects.get(id=2).like()
	>>> Comment.objects.get(id=2).like()
	>>> Comment.objects.get(id=2).like()
	>>> Comment.objects.get(id=3).like()
	>>> Comment.objects.get(id=3).like()
	>>> Comment.objects.get(id=4).like()
	>>> Comment.objects.get(id=5).dislike()

Применям функции like() и dislike() к статьям/новостям:
	>>> Post.objects.get(id=1).like()
	>>> Post.objects.get(id=1).rating
	1
	>>> Post.objects.get(id=1).like()
	>>> Post.objects.get(id=1).like()
	>>> Post.objects.get(id=1).like()
	>>> Post.objects.get(id=1).like()
	>>> Post.objects.get(id=1).like()
	>>> Post.objects.get(id=2).like()
	>>> Post.objects.get(id=2).like()
	>>> Post.objects.get(id=2).like()
	>>> Post.objects.get(id=3).like()
	>>> Post.objects.get(id=3).like()
	>>> Post.objects.get(id=3).like()
	>>> Post.objects.get(id=3).like()
	>>> Post.objects.get(id=3).like()
	>>> Post.objects.get(id=3).like()
	>>> Post.objects.get(id=3).like()
	>>> Post.objects.get(id=3).like()
	>>> Post.objects.get(id=3).dislike()
	>>> Post.objects.get(id=1).dislike()
	>>> Post.objects.get(id=1).dislike()

Создал комментарии для User id 3 и 4:
	>>> Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=User.objects.get(id=3), text='Hello Skillfactory')
	<Comment: Comment object (6)>
	>>> Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=User.objects.get(id=4), text='SomeComment')
	<Comment: Comment object (7)>

Применям функции like() и dislike() к этим комментариям:
	>>> Comment.objects.get(id=6).like()
	>>> Comment.objects.get(id=7).like()

Получаем автора по id:
	>>> Author.objects.get(id=1)
	<Author: Author object (1)>

Присваиваем в переменную а и b и обновляем рейтинги пользователей:
	>>> a = Author.objects.get(id=1)
	>>> a.update_rating()
	>>> a.ratingAuthor
	20
	>>> b = Author.objects.get(id=2)
	>>> b.update_rating()
	>>> b.ratingAuthor
	25

Выводим рейтинг лучшего пользователя применяя сортировку:
	>>> a = Author.objects.order_by('-ratingAuthor')[:1]
	>>> a
	<QuerySet [<Author: Author object (2)>]>

Выводим рейтинги всех пользователей применяя сортировку:
	>>> a = Author.objects.order_by('-ratingAuthor')
	>>> a
	<QuerySet [<Author: Author object (2)>, <Author: Author object (1)>]>

Выводим рейтинги и всех пользователей применяя цикл for:
	>>> for i in a:
	...     i.ratingAuthor
	...     i.authorUser.username
	...
	25
	'Sergey'
	20
	'Yerzhan'

Применяем метод preview() к постам:
	>>> Post.objects.get(id=1).preview()
	'sometext...'
	>>> Post.objects.get(id=3).preview()
	'Hello world!...'

Определяем лучшей пост по лайкам и дислайкам:
	>>> bestPost = Post.objects.order_by('-rating')[:1]
	>>> bestPost
	<QuerySet [<Post: Post object (3)>]>

Выводм дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи
	>>> for i in bestPost:
	...     i.dateCreation
	...     i.author.authorUser
	...     i.rating
	...     i.title
	...     i.preview()
	...
Выводим все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
	>>> bestPostCom = Comment.objects.filter(commentPost=3)
	>>> bestPostCom
	<QuerySet [<Comment: Comment object (4)>, <Comment: Comment object (5)>, <Comment: C
	omment object (6)>]>
	>>>

Выводим через цикл for:
	>>> for k in bestPostCom:
	...     k.dateCreating
	...     k.commentUser
	...     k.rating
	...     k.text
	...
	datetime.datetime(2021, 12, 17, 17, 27, 46, 361544, tzinfo=datetime.timezone.utc)
	<User: Yerzhan>
	1
	'Python is the best prog'
	datetime.datetime(2021, 12, 17, 17, 30, 8, 679615, tzinfo=datetime.timezone.utc)
	<User: Sergey>
	-1
	'Hello Skillfactory'
	datetime.datetime(2021, 12, 17, 17, 49, 23, 418566, tzinfo=datetime.timezone.utc)
	<User: Igor>
	1
	'Hello Skillfactory'
	>>>

2-ой вариант через values:
	>>> bestPostCom.values("dateCreating", "commentUser", "rating", "text")
	<QuerySet [{'dateCreating': datetime.datetime(2021, 12, 17, 17, 27, 46, 361544, tzin
	fo=datetime.timezone.utc), 'commentUser': 1, 'rating': 1, 'text': 'Python is the bes
	t prog'}, {'dateCreating': datetime.datetime(2021, 12, 17, 17, 30, 8, 679615, tzinfo
	=datetime.timezone.utc), 'commentUser': 2, 'rating': -1, 'text': 'Hello Skillfactory
	'}, {'dateCreating': datetime.datetime(2021, 12, 17, 17, 49, 23, 418566, tzinfo=date
	time.timezone.utc), 'commentUser': 3, 'rating': 1, 'text': 'Hello Skillfactory'}]>
	>>>




